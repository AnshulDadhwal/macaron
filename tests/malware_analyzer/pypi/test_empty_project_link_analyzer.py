# Copyright (c) 2024 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for heuristic detecting malicious metadata from PyPI"""
from unittest.mock import MagicMock

from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.empty_project_link import EmptyProjectLinkAnalyzer
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIRegistry


def setup_empty_project_link_analyzer() -> dict:
    """Create an empty-project-link-analyzer setup.

    Returns
    -------
        dict: Setup data for the test.
    """
    package_with_links = "requests"
    mock_pypi_registry_pass = MagicMock(spec=PyPIRegistry)
    mock_pypi_registry_pass.load_defaults()
    mock_pypi_registry_pass.download_package_json(package=package_with_links)

    package_no_links = "sfy_hello"
    mock_pypi_registry_fail = MagicMock(spec=PyPIRegistry)
    mock_pypi_registry_fail.load_defaults()
    mock_pypi_registry_fail.download_package_json(package=package_no_links)
    analyzer = EmptyProjectLinkAnalyzer()
    package_links = {
        "Documentation": "https://requests.readthedocs.io",
        "Homepage": "https://requests.readthedocs.io",
        "Source": "https://github.com/psf/requests",
    }

    return {
        "package_with_links": package_with_links,
        "package_no_links": package_no_links,
        "mock_pypi_registry_pass": mock_pypi_registry_pass,
        "mock_pypi_registry_fail": mock_pypi_registry_fail,
        "analyzer": analyzer,
        "package_links": package_links,
    }


def test_analyze_no_links() -> None:
    """Test for result failed."""
    setup_analyzer = setup_empty_project_link_analyzer()
    mock_pypi_registry_fail = setup_analyzer["mock_pypi_registry_fail"]
    mock_pypi_registry_fail.get_project_links.return_value = {}
    expected_result: tuple[HeuristicResult, dict] = (HeuristicResult.FAIL, {})

    result = setup_analyzer["analyzer"].analyze(mock_pypi_registry_fail)

    assert result == expected_result


def test_analyze_with_links() -> None:
    """Test for result passed."""
    setup_analyzer = setup_empty_project_link_analyzer()
    package_links = setup_analyzer["package_links"]
    mock_pypi_registry_pass = setup_analyzer["mock_pypi_registry_pass"]
    mock_pypi_registry_pass.get_project_links.return_value = package_links
    expected_result: tuple[HeuristicResult, dict] = (HeuristicResult.PASS, {"project_links": package_links})

    result = setup_analyzer["analyzer"].analyze(mock_pypi_registry_pass)

    assert result == expected_result


def test_analyze_none() -> None:
    """Test for result skip."""
    setup_analyzer = setup_empty_project_link_analyzer()
    mock_pypi_registry_pass = setup_analyzer["mock_pypi_registry_pass"]
    mock_pypi_registry_pass.get_project_links.return_value = None
    expected_result: tuple[HeuristicResult, dict] = (HeuristicResult.FAIL, {})

    result = setup_analyzer["analyzer"].analyze(mock_pypi_registry_pass)

    assert result == expected_result
