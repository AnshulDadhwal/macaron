# Copyright (c) 2024 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for heuristic detecting malicious metadata from PyPI"""
from unittest.mock import MagicMock

from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.one_release import OneReleaseAnalyzer
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIRegistry


def one_release_analyzer() -> dict:
    """Create an one-release-analyzer setup.

    Returns
    -------
    dict
        Setup data for the test.
    """
    package_with_one_release = "ttttttttest-nester.py"
    mock_pypi_registry_fail = MagicMock(spec=PyPIRegistry())
    mock_pypi_registry_fail.load_defaults()
    mock_pypi_registry_fail.download_attestation_payload(package=package_with_one_release)

    package_with_many_releases = "requests"
    mock_pypi_registry_pass = MagicMock(spec=PyPIRegistry())
    mock_pypi_registry_pass.load_defaults()
    mock_pypi_registry_pass.download_attestation_payload(package=package_with_many_releases)
    analyzer = OneReleaseAnalyzer()

    return {
        "package_with_one_release": package_with_one_release,
        "package_with_many_releases": package_with_many_releases,
        "mock_pypi_registry_fail": mock_pypi_registry_fail,
        "mock_pypi_registry_pass": mock_pypi_registry_pass,
        "analyzer": analyzer,
    }


def test_analyze_no_releases() -> None:
    """Test for result skipped."""
    setup_analyzer = one_release_analyzer()
    mock_pypi_registry_pass = setup_analyzer["mock_pypi_registry_pass"]
    mock_pypi_registry_pass.get_releases.return_value = None
    expected_result: tuple[HeuristicResult, dict] = (HeuristicResult.SKIP, {"releases": {}})

    result = setup_analyzer["analyzer"].analyze(mock_pypi_registry_pass)

    assert result == expected_result


def test_analyze_one_release() -> None:
    """Test for result failed."""
    release = {
        "0.1.0": [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "defa2fbcebaeeb909511139ce28dac4a77ab2452ba72b49a22b12981b2f375b3",
                    "md5": "9203bbb130f8ddb38269f4861c170d04",
                    "sha256": "168bcccbf5106132e90b85659297700194369b8f6b3e5a03769614f0d200e370",
                },
                "downloads": -1,
                "filename": "ttttttttest_nester.py-0.1.0.tar.gz",
                "has_sig": False,
                "md5_digest": "9203bbb130f8ddb38269f4861c170d04",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": None,
                "size": 546,
                "upload_time": "2016-10-13T05:42:27",
                "upload_time_iso_8601": "2016-10-13T05:42:27.073842Z",
                "url": "https://files.pythonhosted.org/packages/de/fa/2fbcebaeeb909511139ce28d \
                ac4a77ab2452ba72b49a22b12981b2f375b3/ttttttttest_nester.py-0.1.0.tar.gz",
                "yanked": False,
                "yanked_reason": None,
            }
        ]
    }
    setup_analyzer = one_release_analyzer()
    mock_pypi_registry_fail = setup_analyzer["mock_pypi_registry_fail"]
    mock_pypi_registry_fail.get_releases.return_value = release
    expected_result: tuple[HeuristicResult, dict] = (HeuristicResult.FAIL, {"releases": release})

    result = setup_analyzer["analyzer"].analyze(mock_pypi_registry_fail)

    assert result == expected_result


def test_analyze_multiple_releases() -> None:
    """Test for result passed."""
    releases = {
        "0.0.1": [],
        "0.10.0": [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "62350230421b8c4efad6624518028163329ad0c2df9e58e6b3bee013427bf8f6",
                    "md5": "c90a48af18eb4170dbe4832c1104440c",
                    "sha256": "210a82e678c45d433a4ad1f105974b3102a8ab5198872dc0a3238a8750d4c65e",
                },
                "downloads": -1,
                "filename": "requests-0.10.0.tar.gz",
                "has_sig": False,
                "md5_digest": "c90a48af18eb4170dbe4832c1104440c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": None,
                "size": 62046,
                "upload_time": "2012-01-22T05:08:17",
                "upload_time_iso_8601": "2012-01-22T05:08:17.091441Z",
                "url": "https://files.pythonhosted.org/packages/62/35/0230421b8c4efad662451802816332 \
                9ad0c2df9e58e6b3bee013427bf8f6/requests-0.10.0.tar.gz",
                "yanked": False,
                "yanked_reason": None,
            }
        ],
    }
    setup_analyzer = one_release_analyzer()
    mock_pypi_registry_pass = setup_analyzer["mock_pypi_registry_pass"]
    mock_pypi_registry_pass.get_releases.return_value = releases
    expected_result: tuple[HeuristicResult, dict] = (HeuristicResult.PASS, {"releases": releases})

    result = setup_analyzer["analyzer"].analyze(mock_pypi_registry_pass)
    assert result == expected_result
